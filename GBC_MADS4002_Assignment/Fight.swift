//
//  Fight.swift
//  GBC_MADS4002_Assignment
//
//  Created by Harshit Malhotra on 2022-03-02.
//

import Foundation
class Fight{
    // -stored properties
    private var hero:Heros
    private var monster:Monsters
    private var fightOver: Bool
    private var storedTurn: GameCharcter
    
    
    // - computed properties (always var, never let)
    var isFightOver: Bool{
        get{
            return fightOver
        }
        set(updatedFightOverStatus){
            fightOver = updatedFightOverStatus
        }

    }
    // - for tracking which character has the turn
    var characterTurn: GameCharcter{
        get{
            return storedTurn
        }
        set(updatedTurn){
            storedTurn = updatedTurn
        }
    }
    
    /**
     If you don’t want to use an argument label for an initializer parameter, write an underscore ( _ ) instead of an explicit argument label for that parameter to override the default behavior.
     */
    init(_ hero:Heros, _ monster:Monsters, gameCharacterTurn storedTurn:GameCharcter ) {
        self.hero = hero
        self.monster = monster
        self.fightOver = false
        self.storedTurn = storedTurn
    }
    /**
     This is a private helper function that calculates the damage generated by character 1,
     and applies that damage to character 2’s health points.
     */
    private func applyDamage(_ from:GameCharcter ,_ to:GameCharcter) {
        
        var damageCaused: Int = 0
        // Hero is attacking Monster
        if(characterTurn.characterRole == "HERO"){
            // checking if the attack is CRITICAL HIT or not
            if(self.hero.isAttackCriticalHit){
                damageCaused = Int(1.2 * Double(self.hero.weaponStrength))
                print("\n*** \(from) attacks: \(damageCaused) damage!")
                print("*** CRITICAL HIT!\n")
                self.monster.takeDamage(amt: damageCaused)
            } else{
                damageCaused = self.hero.weaponStrength
                print("\n*** \(from) attacks: \(damageCaused) damage!")
                self.monster.takeDamage(amt: damageCaused)
            }
        } else{  // Monster is attacking Hero
            
            // checking if the attack is CRITICAL MISS or not
            if(self.monster.isAttackCriticalMiss){
                damageCaused = 0
                print("\n*** \(to) attacks: \(damageCaused) damage!")
                print("*** \(monster) MISSED!\n")
                self.hero.takeDamage(amt: damageCaused)
            }else{
                damageCaused = self.monster.attackPower
                print("\n*** \(to) attacks: \(damageCaused) damage!")
                self.hero.takeDamage(amt: damageCaused)
            }
        }
    }

    /**
     This function will only be used by the HERO as MONSTER has only one action(Attack)
     Perform different sequences as per the action Value
     **/
    func performTurn(_ actionValue: Int){
        /**
         Initializing from a Raw Value
         If you define an enumeration with a raw-value type, the enumeration automatically receives an initializer that takes a value of the raw value’s type (as a parameter called rawValue) and returns either an enumeration case or nil.
         */
        // -Checking the health of game characters BEFORE performing action
        if(!checkHealth()){
            return
        }
        
        let action = heroActions(rawValue: actionValue)!
        switch action{
        case .attack:
            applyDamage(self.hero, self.monster)
        case .sneak:
            _ = self.hero.printSneakResult(monster: self.monster)
            // -If user sneak the fight will be over either the monster wins or the hero wins
            self.isFightOver = true
        case .run_away:
            /**
             #Requirement
             If Hugie runs away, the monster automatically wins.
             **/
            self.monster.winner = 1
            self.isFightOver = true
        }
        
        // -Checking the health of game characters AFTER performing action
        if(!checkHealth()){
            return
        }
        
    }
    
    /**This function will check health of GameCharacters & return FALSE if either of there health is reduced to a value zero or -ve**/
    private func checkHealth() -> Bool{
        var health: Bool = true
        // -Fight end based on health points
        if(hero.maxHealthPoints<=0 || monster.maxHealthPoints<=0){
            health = false
            isFightOver = true
            
            // -hero is the winner
            if(hero.maxHealthPoints>0){
               hero.winner=1
            }else{
               // -monster is the winner
               monster.winner=1
            }
        }
        return health
    }
    /**
     OUTPUT depends on the string returned by overriden description String of the CustomStringConvertible(Protocol)
     **/
    func checkHero() -> Heros {
        return self.hero
    }
    /**
     OUTPUT depends on the string returned by overriden description String of the CustomStringConvertible(Protocol)
     **/
    func checkMonster() -> Monsters {
        return self.monster
    }

}
